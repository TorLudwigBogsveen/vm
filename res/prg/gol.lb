MOVDIM 5000 CURRENT_FRAMEBUFFER
MOVDIM 5000 FRONT_FRAMEBUFFER
MOVDIM 3000 BACK_FRAMEBUFFER
MOVDIM 20000 CURRENT_BUFFER
MOVDIM 40000 OLD_BUFFER
CALLI START


:WIDTH
.byte 160
.byte 0

:HEIGHT
.byte 90
.byte 0

:CURRENT_FRAMEBUFFER
.byte 0
.byte 0

:FRONT_FRAMEBUFFER
.byte 0
.byte 0

:BACK_FRAMEBUFFER
.byte 0
.byte 0

:CURRENT_BUFFER
.byte 0
.byte 0

:OLD_BUFFER
.byte 0
.byte 0    

:START

/*Initializes the stack pointer*/
MOVDIR 60000 SP

/*Sets width and height of screen in pixels*/
MOVDMR WIDTH RA 
MOVDMR HEIGHT RB
MOVDMR BACK_FRAMEBUFFER RC
MOVIR 0 HD


/*Set screen size*/
INT HD

MOVDIR 1 RB /*y*/
:INIT_Y_Loop
MOVDIR 1 RA /*x*/
    :INIT_X_Loop
    PUSHD RA
    PUSHD RB
    CALLI XOR_SHIFT
    MOVDIR 32000 RB
    CMPD RA RB
    MOVDIR SKIP_GENERATE RE
    POPD RB
    POPD RA
    JL RE

    /*Index calculation*/
    PUSHD RA
    PUSHD RB
    MOVDMR CURRENT_BUFFER RC
    ADDD RC RA /*index = CURRENT_FRAMEBUFFER + x*/
    MOVDMR WIDTH RE
    MULD RE RB /*y * width*/
    ADDD RB RA /*index = CURRENT_FRAMEBUFFER + x  + y * width*/
    MOVIR 1 HD
    MOVRP HD RA
    POPD RB
    POPD RA


    :SKIP_GENERATE

    /*x += 1*/
    INCD RA
    MOVDMR WIDTH RE
    DECD RE
    CMPD RA RE
    MOVDIR INIT_X_Loop RE
    MOVIR 1 HD
    JNE RE
    MOVIR 0 HD

INCD RB
MOVDMR HEIGHT RE
DECD RE
CMPD RB RE
MOVDIR INIT_Y_Loop RE
JNE RE

:Loop
CALLI CLEAR
CALLI RENDER
CALLI UPDATE
CALLI SWITCH_FRAME_BUFFER
CALLI FLIP_BUFFER
BRK
MOVDIR Loop RE
JMP RE

:FLIP_BUFFER
MOVDMR OLD_BUFFER RA
MOVDMM CURRENT_BUFFER OLD_BUFFER
MOVDRM RA CURRENT_BUFFER
RET

:SWITCH_FRAME_BUFFER
/*Sets width and height of screen in pixels*/
MOVDMR WIDTH RA 
MOVDMR HEIGHT RB
MOVDMR CURRENT_FRAMEBUFFER RC
MOVIR 0 HD


/*Set screen size*/
INT HD

MOVDMR CURRENT_FRAMEBUFFER RA
MOVDMR FRONT_FRAMEBUFFER RB
MOVDMR BACK_FRAMEBUFFER RC

CMPD RA RB
MOVDIR SWITCH RE
JE RE
MOVDRM RB CURRENT_FRAMEBUFFER
MOVDIR SWITCH_END RE
JMP RE

:SWITCH
MOVDRM RC CURRENT_FRAMEBUFFER

:SWITCH_END
RET

:UPDATE
MOVDIR 1 RB /*y*/
:Y_Loop
MOVDIR 1 RA /*x*/
    :X_Loop
    /*Index calculation*/
    PUSHD RA
    PUSHD RB
    MOVDMR CURRENT_BUFFER RC
    ADDD RC RA /*index = CURRENT_FRAMEBUFFER + x*/
    MOVDMR WIDTH RE
    MULD RE RB /*y * width*/
    ADDD RB RA /*index = CURRENT_FRAMEBUFFER + x  + y * width*/
    PUSHD RA
    /*Neighbours*/
    MOVDMR WIDTH RE
    MOVIR 0 LD

    /*MIDDLE LEFT*/
    DECD RA
    MOVPR RA HD
    ADD HD LD

    /*DOWN LEFT*/
    ADDD RE RA
    MOVPR RA HD
    ADD HD LD

    /*DOWN MIDDLE*/
    INCD RA
    MOVPR RA HD
    ADD HD LD

    /*DOWN RIGHT*/
    INCD RA
    MOVPR RA HD
    ADD HD LD

    /*MIDDLE RIGHT*/
    SUBD RE RA
    MOVPR RA HD
    ADD HD LD

    /*UP RIGHT*/
    SUBD RE RA
    MOVPR RA HD
    ADD HD LD

    /*UP MIDDLE*/
    DECD RA
    MOVPR RA HD
    ADD HD LD

    /*UP LEFT*/
    DECD RA
    MOVPR RA HD
    ADD HD LD


    MOVIR 3 HD
    CMP HD LD
    
    MOVDIR BIRTH RE
    JE RE
    MOVDIR DEATH RE
    JG RE

    MOVIR 2 HD
    CMP HD LD
    JL RE

    POPD RA
    PUSHD RA
    MOVPR RA HD
    MOVDIR END_UPDATE RE
    JMP RE

    :BIRTH
    
    MOVIR 1 HD
    MOVDIR END_UPDATE RE
    JMP RE
    
    :DEATH
    MOVIR 0 HD


    :END_UPDATE
    POPD RA
    MOVDMR CURRENT_BUFFER RC
    SUBD RC RA
    MOVDMR OLD_BUFFER RC
    ADDD RC RA
    MOVRP HD RA
    POPD RB
    POPD RA

    /*x += 1*/
    INCD RA
    MOVDMR WIDTH RE
    DECD RE
    CMPD RA RE
    MOVDIR X_Loop RE
    JNE RE
INCD RB
MOVDMR HEIGHT RE
DECD RE
CMPD RB RE
MOVDIR Y_Loop RE
JNE RE
RET

:RENDER
MOVDIR 0 RB /*y*/
:RENDER_Y_Loop
MOVDIR 0 RA /*x*/
    :RENDER_X_Loop

    /*Index calculation*/
    PUSHD RA
    PUSHD RB
    MOVDMR CURRENT_BUFFER RC
    ADDD RC RA /*index = CURRENT_FRAMEBUFFER + x*/
    MOVDMR WIDTH RE
    MULD RE RB /*y * width*/
    ADDD RB RA /*index = CURRENT_FRAMEBUFFER + x  + y * width*/
    MOVPR RA HD
    POPD RB
    POPD RA

    /*Paint*/
    MOVIR 0 LD
    CMP HD LD
    MOVDIR SKIP_PAINT RE
    JE RE

    PUSHD RA
    PUSHD RB
    CALLI PAINT
    POPD RB
    POPD RA

    :SKIP_PAINT

    /*x += 1*/
    INCD RA
    MOVDMR WIDTH RE
    CMPD RA RE
    MOVDIR RENDER_X_Loop RE
    JNE RE
INCD RB
MOVDMR HEIGHT RE
CMPD RB RE
MOVDIR RENDER_Y_Loop RE
JNE RE
RET

:CLEAR
MOVDIR 0 RB /*y*/
:CLEAR_Y_Loop
MOVDIR 0 RA /*x*/
    :CLEAR_X_Loop

    /*Index calculation*/
    PUSHD RA
    PUSHD RB
    MOVDMR CURRENT_FRAMEBUFFER RC
    ADDD RC RA /*index = CURRENT_FRAMEBUFFER + x*/
    MOVDMR WIDTH RE
    MOVDIR 8 RF
    DIVD RF RE
    MULD RE RB /*y * width*/
    ADDD RB RA /*index = CURRENT_FRAMEBUFFER + x  + y * width*/
    MOVIR 0 LD
    MOVRP HD RA
    POPD RB
    POPD RA

    /*x += 1*/
    INCD RA
    MOVDMR WIDTH RE
    MOVDIR 8 RF
    DIVD RF RE
    CMPD RA RE
    MOVDIR CLEAR_X_Loop RE
    JNE RE
INCD RB
MOVDMR HEIGHT RE
CMPD RB RE
MOVDIR CLEAR_Y_Loop RE
JNE RE
RET

/*
RA: x   
RB: y
RC: color
*/
:PAINT
/*INDEX = RA*/
MOVDMR WIDTH RE
MULD RE RB
ADDD RB RA
/*BYTE INDEX = RB*/
MOVDRR RA RB
MOVDIR 8 RE
DIVD RE RB
/*BIT INDEX = RA*/
MULD RB RE
SUBD RE RA
/*BIT VALUE = RA*/
MOVDIR 1 RE
SHLD RA RE
MOVDRR RE RA
/*SET VALUE*/
MOVDMR CURRENT_FRAMEBUFFER RE
ADDD RE RB
MOVDPR RB RF
ORD RA RF
MOVDRP RF RB
RET

:XOR_SHIFT_SEED
.byte 225
.byte 172

:XOR_SHIFT
MOVDMR XOR_SHIFT_SEED RA

MOVDRR RA RB
MOVDIR 7 RC
SHLD RC RB /*SEED <<= 7*/
XORD RB RA 

MOVDRR RA RB
MOVDIR 9 RC
SHRD RC RB /*SEED <<= 7*/
XORD RB RA 

MOVDRR RA RB
MOVDIR 8 RC
SHLD RC RB /*SEED <<= 7*/
XORD RB RA

MOVDRM RA XOR_SHIFT_SEED
RET
